Team: bug.exist() == false
Teammates: hl58 tgao13 gjia2 dazhenc2
Data used: Open Flights


Leading Question: Which airport is the most significant –– should have the highest priorities in security protection?


Dataset: We will use the Open Flights data set provided by the class. We will design a mini program that will take all the inputs of the data and generate them into the format we want. If certain data does not contain sufficient information, we will throw this data out of our consideration.


Traversal: We will use DFS or BFS, since Graph Traversal is not yet a topic covered in class. However, this will not create much of an effect on our contents. The expected input will be the data in CVS form that is provided, and we will likely turn them into a hash map with sets that contains the information for the mapping outlines for each airport. The estimated run time will be O(n) where the n is the number of data provided.


Covered algorithm: We will use the Floyd-Warshall Algorithm for finding the shortest path between the nodes. The input will be any two nodes, or airports, and the output will be the descriptive path of the most efficient plane ride path with the airports in a vector and its length. From the internet, it says that the run time of the algorithm can not be better than O(n), and will likely to be O(|V|^3), where V is the number os vertices. Thus we will achieve for it to run at a O(n) time but be expecting worse results.


Uncovered algorithm: The main algorithm we will use is the betweenness centrality algorithm. This algorithm can help us determine which airport has the largest betweenness and therefore show that it is the most important airport. The input will be the provided data set, entirely, and the output will be one airport that has the most significance in turns of how it connects to other airports in the provided data set. The algorithm is depended on the finding of the shortest paths for each node, and with some internet research, the expected run time will be O(n * m) where n is the number of nodes and m is the number of edges in the data set. However, this expectation can change in the future, depending how exactly we wish to implement the algorithm.


Timelines:
First week(Nov 8 to Nov 12): Create basic algorithm structures and set up proper variable and class names.
Second week(Nov 15 to Nov 19): Implement graph traversal functions 
Third week(Nov 22 to Love 26): Implement first algorithm (Floyd-Warshall)
Fourth week(Nov 29 to Dec 3): Implement second algorithm (Betweenness Centrality)
Final week(Dec 6 to Dec 10): Debug and comment